:: arr: []int
fn square: []int =
    let res = arr.util::map(util::square)

    return res

:: arr: []int
export fn plus1: []int =
    let res = arr
        .util::map(util::add1)

    return res

fn main =
    // possible lambda syntax, type is kind of annoying to write so 
    // full type inference is needed
    // let lambda: fn([]int -> []int) = fn x => for y in x: y * 2

    square([1, 2, 3, 4, 5])
        .util::print()
    plus1([1, 2, 3, 4, 5])
        .util::print()

    // util::main()

/*
maybe new syntax

// This seems better since you usually change the arg name with some ide functionality
// while you change the type manually
// putting the type before func name and foo does seem kind of inconsistent though
:: arg        int
:: longer_arg string
fn int func =
    let int foo = 0

// idk about this
:: int    arg
:: string longer_arg
fn int func =
    let int foo = 0
*/