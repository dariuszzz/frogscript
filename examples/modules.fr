type Person =
    age  int
    name string

fn square(arr [int]) -> [int] =
    let res = arr.util::map(fn(x) return x * x)

    return res

export fn plus1(arr [int]) -> int =
    let [int] res = arr
        .util::map(fn(x) return x + 1)

    return res

fn map_and_add(arr [int], f fn(int -> int), add int) -> int =
    let mapped = util::map(arr, f)
    let mapped = util::map(mapped, fn(x) return x + add)
    return mapped

fn main =
    map_and_add(
        [1, 2, 3],
        fn(x)
            let square = x * x
            return square,
        2
    )
    .util::print()

    let push = fn(arr, x) @js(arr ".push(" x ")")

    mut arr2 = []
    for i in 1..=10: arr2.push(i)

    arr2.util::map(fn(x) return x * x, 2)
        .util::print()
        
    let util::Printable something_that_can_be_printed = ...

    let people = [
        Person { age: 10, name: "Marque" },
        Person { age: 14, name: "Marc" },
        Person { age: 93, name: "Mark" },
    ]

    let fn(Person -> string) person_lambda = fn(person) 
        return util::to_string(person.age) + " - " + person.name

    for person Person in people:
        let str = person_lambda(person)
        util::print(str)

    // util::main()
