type Foo =
    l fn(int -> int)

fn main =
    let text = "Siema"

    mut arr = []

    for i in 0..4:
        core::array::push(arr, i)
        core::print(text)

    for el in arr:
        core::print(el)

    core::array::map(arr, fn(x int) return x * x)
    core::print(arr)

    let filtered = core::array::filter(arr, fn(x) return x > 4)
    core::print(filtered)

    let foo = Foo { l: fn(x) return x * 2 }

    let fn(int -> ()) lambda = fn(x) core::print(x)

    lambda(2)
    lambda((foo.l)(2))
