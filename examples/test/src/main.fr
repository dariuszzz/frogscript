/*
enum Enum =
    VariantOne Int
    VariantTwo { val: string }
    VariantThree OtherType


let foo = VariantOne 34

match foo:
    VariantOne x => //x is 34
    VariantTwo { val } =>
    VariantThree OtherType { ... } =>
*/

module core =
    fn foo1(x int) = return x * 2

module foo =
    let val = 53

    module core =
        let val = 23



fn main =
    core::print("siema")

/*
    let siema = 530
    let fstring = "{siema}"
    core::print(fstring)

    let num = 53// test::core::foo(23)
    core::print(num)
    other_dep::core::print(2)
    other_dep::other_foo()

*/

/*
    let text = "Siema"

    mut arr = []

    for i in 0..4:
        core::array::push(arr, i)
        core::print(text)

    for el in arr:
        core::print(el)

    core::array::map(arr, fn(x int) return x * x)

    let filtered = core::array::filter(arr, fn(x) return x > 4)

    let foo = Foo { l: fn(x) return x * 2 }

    let fn(int -> ()) lambda = fn(x) core::print(x)

    lambda(2)
    lambda((foo.l)(2))

type Foo =
    l fn(int -> int)
*/
