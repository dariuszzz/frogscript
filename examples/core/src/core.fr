export fn deep_copy(x any) -> any = @js("return structuredClone({x});")
export fn print(x any) -> () = @js("console.log({x})")
export fn panic(msg string) =
    core::print("Panic: {msg}")
    @js("process.exit(1)")

export fn assert(eq bool, msg string) -> bool =
    if !eq:
        core::panic("Assertion failed: {msg}")

    return eq

export fn range(start int, end int) -> [any] =
    return @js("
        (function*() \{
            for(let i = {start}; i < {end}; i++) \{
                yield i;
            \}
        \})()
    ")

export fn len(x any) -> int =
    return @js("{x}.length")

module string =
    export fn at(str string, idx int) -> string =
        return @js("{str}[{idx}]")

module array =
    export fn push(arr [any], el any) -> () =
        return @js("{arr}.push({el})")

    export fn pop(arr [any]) -> any =
        return @js("{arr}.pop()")


    export fn map(arr [any], f fn(any) -> any) -> () =
        for i in 0..core::len(arr):
            arr[i] = f(arr[i])

    export fn filter(arr [any], f fn(any) -> bool) -> [any] =
        mut new_arr = []

        for el in arr:
            if f(el) == true:
                new_arr.push(el)

        return new_arr

    export fn remove(arr [any], index int) -> () =
        for i in index..(core::len(arr) - 1):
            arr[i] = arr[i+1]

        arr.pop()

module map =
    type Map = any

    export fn new() -> Map =
        return @js("new Map()")

    export fn insert(map Map, key any, val any) -> Map =
        @js("{map}.set({key}, {val})")

    export fn get(map Map, key any) -> any =
        return @js("{map}.get({key})")

    export fn keys(map Map) -> [any] =
        return @js("{map}.keys()")
