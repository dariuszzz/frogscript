export fn deep_copy(x ()) -> () = @js("return structuredClone(" x ");")
export fn print(x ()) = @js("console.log(" x ")")

module io =
  export fn nested_print(x ()) = @js("console.log(" x ")")

  module elo =
    fn super() = ...

export fn range(start int, end int) =
    return @js("
        (function*() {
            for(let i = " start "; i < " end "; i++) {
                yield i;
            }
        })()
    ")


module array =
    export fn push(arr [x], el x) =
        return @js(arr ".push(" el ")")

    export fn pop(arr [x], el x) =
        return @js(arr ".pop(" el ")")

    export fn len(arr [x], el x) -> int =
        return @js(arr ".length")

    export fn map(arr [x], f fn(x -> x)) =
        for i in 0..len(arr):
            arr[i] = f(arr[i])

    export fn filter(arr [x], f fn(x -> bool)) -> [x] =
        mut new_arr = []

        for el in arr:
            if f(el) == true:
                new_arr.push(el)

        return new_arr
