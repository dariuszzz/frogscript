/*
type Foo =
    val int

fn get_4 = return 4

fn test(val int) -> int =
    return val + (5 * get_4()) + val

fn other_foo(arr [int]) =

    mut sum = 0

    for i in arr:
        sum += 1
        if i > 2:
            break

    return sum

fn main =
    other_foo([1, 2, 3])

*/

fn foo =
    return 2

fn main =
    let a = "hello"
    let b = -foo() + 2 * 53

    let c = 2.593 * 4.20 - 20.0

    let d = 0
    // convert c to int and store in d
    @instr("fcvtzs {d}, {c}")

    d += b

    // print out `a`
    @instr("
    mov x0, 1
    mov x2, 5
    mov x16, 4
    svc 0
    | x0 x2 x16
    ")

    // exit with code `d`
    @instr("
    mov x0, {d}
    mov x16, 1
    svc 0
    | x0 x16
    ")
