/*
type Foo =
    val int

fn get_4 = return 4

fn test(val int) -> int =
    return val + (5 * get_4()) + val

fn other_foo(arr [int]) =

    mut sum = 0

    for i in arr:
        sum += 1
        if i > 2:
            break

    return sum

fn main =
    other_foo([1, 2, 3])

*/

fn foo =
    return 2

fn main =
    mut arr = [4.42, 6.23]

    arr[0] = 2.59
    let out_f = arr[0]
    let out = 0

    // convert to int
    @instr("fcvtzs {out}, {out_f}")

    // print
    @instr("
    mov x0, {out}
    mov x16, 1
    svc 0
    | x0 x16
    ")


/*
    // convert c to int and store in d
    @instr("fcvtzs {d}, {c}")
*/

/*
    // print message
    @instr("
    mov x0, 1
    mov x1, {message}
    mov x2, 5
    mov x16, 4
    svc 0
    | x0 x1 x2 x16
    ")
*/
