/*
type Foo =
    val int

fn get_4 = return 4

fn test(val int) -> int =
    return val + (5 * get_4()) + val

fn other_foo(arr [int]) =

    mut sum = 0

    for i in arr:
        sum += 1
        if i > 2:
            break

    return sum

fn main =
    other_foo([1, 2, 3])

*/

fn foo(a int) =
    mut ret_val = 2 * a

    for i in [1,2,3]:
        if i == 2:
            continue


        let b = 25 + ret_val

    return ret_val

fn main =
    mut arr = ["siema", "czesc"]

    mut val = 100
    val = 10

    let out = foo(val)

    let msg = @type(arr)

    @instr("
    mov x0, {out}
    mov x16, 1
    svc 0
    | x0 x16
    ")


/*
    // print message
    @instr("
    mov x0, 1
    mov x1, {msg}
    mov x2, {len}
    mov x16, 4
    svc 0
    | x0 x1 x2 x16
    ")

    // convert c to int and store in d
    @instr("fcvtzs {d}, {c}")
*/

/*
    // print message
    @instr("
    mov x0, 1
    mov x1, {message}
    mov x2, 5
    mov x16, 4
    svc 0
    | x0 x1 x2 x16
    ")
*/
