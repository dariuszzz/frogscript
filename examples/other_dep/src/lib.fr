;-
type Foo =
    val int

fn get_4 = return 4

fn test(val int) -> int =
    return val + (5 * get_4()) + val

fn other_foo(arr [int]) =

    mut sum = 0

    for i in arr:
        sum += 1
        if i > 2:
            break

    return sum

fn main =
    other_foo([1, 2, 3])

-;

fn foo(a int) = return 20 * a

fn main =
    let a = [2.50, 24.0, 29.4]
    let b = 20
    let c = 30
    let d = 4
    let e = 6

    let msg = "siema"


    let bar = b + c + d + e

    ; print message
    @instr("
    mov x0, 1
    mov x1, {msg}
    mov x2, 5
    mov x16, 4
    svc 0
    | x0 x1 x2 x16
    ")

    @instr("
    mov x0, {bar}
    mov x16, 1
    svc 0
    | x0 x16
    ")

    ; let msg = @type(arr)
;-

    ; convert c to int and store in d
    @instr("fcvtzs {d}, {c}")

    let msg = "siema"
    let out = 0 ; foo(6)
-;

    ;-
    -;

;-
    ; print message
    @instr("
    mov x0, 1
    mov x1, {message}
    mov x2, 5
    mov x16, 4
    svc 0
    | x0 x1 x2 x16
    ")
-;
