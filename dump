[
    Module {
        module_name: "core::string",
        type_defs: [],
        function_defs: [
            FunctionDef {
                export: true,
                func_name: "at",
                argument_list: [
                    FunctionArgument {
                        arg_name: "str",
                        arg_type: String,
                        is_env: false,
                    },
                    FunctionArgument {
                        arg_name: "idx",
                        arg_type: Int,
                        is_env: false,
                    },
                ],
                return_type: String,
                function_body: CodeBlock {
                    indentation: 8,
                    expressions: [
                        Return(
                            JS(
                                Literal(
                                    String(
                                        [
                                            Code(
                                                Variable(
                                                    Variable {
                                                        name: "str",
                                                    },
                                                ),
                                            ),
                                            String(
                                                "[",
                                            ),
                                            Code(
                                                Variable(
                                                    Variable {
                                                        name: "idx",
                                                    },
                                                ),
                                            ),
                                            String(
                                                "]",
                                            ),
                                        ],
                                    ),
                                ),
                            ),
                        ),
                    ],
                },
            },
        ],
        toplevel_scope: CodeBlock {
            indentation: 0,
            expressions: [],
        },
        reachable_modules: [],
    },
    Module {
        module_name: "core::array",
        type_defs: [],
        function_defs: [
            FunctionDef {
                export: true,
                func_name: "push",
                argument_list: [
                    FunctionArgument {
                        arg_name: "arr",
                        arg_type: Array(
                            Any,
                        ),
                        is_env: false,
                    },
                    FunctionArgument {
                        arg_name: "el",
                        arg_type: Any,
                        is_env: false,
                    },
                ],
                return_type: Void,
                function_body: CodeBlock {
                    indentation: 8,
                    expressions: [
                        Return(
                            JS(
                                Literal(
                                    String(
                                        [
                                            Code(
                                                Variable(
                                                    Variable {
                                                        name: "arr",
                                                    },
                                                ),
                                            ),
                                            String(
                                                ".push(",
                                            ),
                                            Code(
                                                Variable(
                                                    Variable {
                                                        name: "el",
                                                    },
                                                ),
                                            ),
                                            String(
                                                ")",
                                            ),
                                        ],
                                    ),
                                ),
                            ),
                        ),
                    ],
                },
            },
            FunctionDef {
                export: true,
                func_name: "pop",
                argument_list: [
                    FunctionArgument {
                        arg_name: "arr",
                        arg_type: Array(
                            Any,
                        ),
                        is_env: false,
                    },
                ],
                return_type: Any,
                function_body: CodeBlock {
                    indentation: 8,
                    expressions: [
                        Return(
                            JS(
                                Literal(
                                    String(
                                        [
                                            Code(
                                                Variable(
                                                    Variable {
                                                        name: "arr",
                                                    },
                                                ),
                                            ),
                                            String(
                                                ".pop()",
                                            ),
                                        ],
                                    ),
                                ),
                            ),
                        ),
                    ],
                },
            },
            FunctionDef {
                export: true,
                func_name: "map",
                argument_list: [
                    FunctionArgument {
                        arg_name: "arr",
                        arg_type: Array(
                            Any,
                        ),
                        is_env: false,
                    },
                    FunctionArgument {
                        arg_name: "f",
                        arg_type: Function(
                            FunctionType {
                                env_args: [],
                                args: [
                                    Any,
                                ],
                                ret: Any,
                            },
                        ),
                        is_env: false,
                    },
                ],
                return_type: Void,
                function_body: CodeBlock {
                    indentation: 8,
                    expressions: [
                        For(
                            For {
                                binding: "i",
                                binding_type: Infer,
                                iterator: FunctionCall(
                                    FunctionCall {
                                        func_expr: Variable(
                                            Variable {
                                                name: "core::range",
                                            },
                                        ),
                                        arguments: [
                                            Literal(
                                                Int(
                                                    0,
                                                ),
                                            ),
                                            FunctionCall(
                                                FunctionCall {
                                                    func_expr: Variable(
                                                        Variable {
                                                            name: "core::len",
                                                        },
                                                    ),
                                                    arguments: [
                                                        Variable(
                                                            Variable {
                                                                name: "arr",
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                body: CodeBlock {
                                    indentation: 12,
                                    expressions: [
                                        Assignment(
                                            Assignment {
                                                lhs: ArrayAccess(
                                                    ArrayAccess {
                                                        expr: Variable(
                                                            Variable {
                                                                name: "arr",
                                                            },
                                                        ),
                                                        index: Variable(
                                                            Variable {
                                                                name: "i",
                                                            },
                                                        ),
                                                    },
                                                ),
                                                rhs: FunctionCall(
                                                    FunctionCall {
                                                        func_expr: Variable(
                                                            Variable {
                                                                name: "f",
                                                            },
                                                        ),
                                                        arguments: [
                                                            ArrayAccess(
                                                                ArrayAccess {
                                                                    expr: Variable(
                                                                        Variable {
                                                                            name: "arr",
                                                                        },
                                                                    ),
                                                                    index: Variable(
                                                                        Variable {
                                                                            name: "i",
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            },
                        ),
                    ],
                },
            },
            FunctionDef {
                export: true,
                func_name: "filter",
                argument_list: [
                    FunctionArgument {
                        arg_name: "arr",
                        arg_type: Array(
                            Any,
                        ),
                        is_env: false,
                    },
                    FunctionArgument {
                        arg_name: "f",
                        arg_type: Function(
                            FunctionType {
                                env_args: [],
                                args: [
                                    Any,
                                ],
                                ret: Boolean,
                            },
                        ),
                        is_env: false,
                    },
                ],
                return_type: Array(
                    Any,
                ),
                function_body: CodeBlock {
                    indentation: 8,
                    expressions: [
                        VariableDecl(
                            VariableDecl {
                                var_name: "new_arr",
                                var_type: Array(
                                    Infer,
                                ),
                                var_value: ArrayLiteral(
                                    ArrayLiteral {
                                        elements: [],
                                    },
                                ),
                                is_mutable: true,
                                is_env: false,
                            },
                        ),
                        For(
                            For {
                                binding: "el",
                                binding_type: Infer,
                                iterator: Variable(
                                    Variable {
                                        name: "arr",
                                    },
                                ),
                                body: CodeBlock {
                                    indentation: 12,
                                    expressions: [
                                        If(
                                            If {
                                                cond: BinaryOp(
                                                    BinaryOp {
                                                        op: Equal,
                                                        lhs: FunctionCall(
                                                            FunctionCall {
                                                                func_expr: Variable(
                                                                    Variable {
                                                                        name: "f",
                                                                    },
                                                                ),
                                                                arguments: [
                                                                    Variable(
                                                                        Variable {
                                                                            name: "el",
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        rhs: Literal(
                                                            Boolean(
                                                                true,
                                                            ),
                                                        ),
                                                    },
                                                ),
                                                true_branch: CodeBlock {
                                                    indentation: 16,
                                                    expressions: [
                                                        FunctionCall(
                                                            FunctionCall {
                                                                func_expr: Variable(
                                                                    Variable {
                                                                        name: "push",
                                                                    },
                                                                ),
                                                                arguments: [
                                                                    Variable(
                                                                        Variable {
                                                                            name: "new_arr",
                                                                        },
                                                                    ),
                                                                    Variable(
                                                                        Variable {
                                                                            name: "el",
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                                else_branch: None,
                                            },
                                        ),
                                    ],
                                },
                            },
                        ),
                        Return(
                            Variable(
                                Variable {
                                    name: "new_arr",
                                },
                            ),
                        ),
                    ],
                },
            },
        ],
        toplevel_scope: CodeBlock {
            indentation: 0,
            expressions: [],
        },
        reachable_modules: [],
    },
    Module {
        module_name: "core",
        type_defs: [],
        function_defs: [
            FunctionDef {
                export: true,
                func_name: "deep_copy",
                argument_list: [
                    FunctionArgument {
                        arg_name: "x",
                        arg_type: Any,
                        is_env: false,
                    },
                ],
                return_type: Any,
                function_body: CodeBlock {
                    indentation: 0,
                    expressions: [
                        JS(
                            Literal(
                                String(
                                    [
                                        String(
                                            "return structuredClone(",
                                        ),
                                        Code(
                                            Variable(
                                                Variable {
                                                    name: "x",
                                                },
                                            ),
                                        ),
                                        String(
                                            ");",
                                        ),
                                    ],
                                ),
                            ),
                        ),
                    ],
                },
            },
            FunctionDef {
                export: true,
                func_name: "print",
                argument_list: [
                    FunctionArgument {
                        arg_name: "x",
                        arg_type: Any,
                        is_env: false,
                    },
                ],
                return_type: Void,
                function_body: CodeBlock {
                    indentation: 0,
                    expressions: [
                        JS(
                            Literal(
                                String(
                                    [
                                        String(
                                            "console.log(",
                                        ),
                                        Code(
                                            Variable(
                                                Variable {
                                                    name: "x",
                                                },
                                            ),
                                        ),
                                        String(
                                            ")",
                                        ),
                                    ],
                                ),
                            ),
                        ),
                    ],
                },
            },
            FunctionDef {
                export: true,
                func_name: "range",
                argument_list: [
                    FunctionArgument {
                        arg_name: "start",
                        arg_type: Int,
                        is_env: false,
                    },
                    FunctionArgument {
                        arg_name: "end",
                        arg_type: Int,
                        is_env: false,
                    },
                ],
                return_type: Array(
                    Any,
                ),
                function_body: CodeBlock {
                    indentation: 4,
                    expressions: [
                        Return(
                            JS(
                                Literal(
                                    String(
                                        [
                                            String(
                                                "\n        (function*() \\{\n            for(let i = ",
                                            ),
                                            Code(
                                                Variable(
                                                    Variable {
                                                        name: "start",
                                                    },
                                                ),
                                            ),
                                            String(
                                                "; i < ",
                                            ),
                                            Code(
                                                Variable(
                                                    Variable {
                                                        name: "end",
                                                    },
                                                ),
                                            ),
                                            String(
                                                "; i++) \\{\n                yield i;\n            \\}\n        \\})()\n    ",
                                            ),
                                        ],
                                    ),
                                ),
                            ),
                        ),
                    ],
                },
            },
            FunctionDef {
                export: true,
                func_name: "len",
                argument_list: [
                    FunctionArgument {
                        arg_name: "x",
                        arg_type: Any,
                        is_env: false,
                    },
                ],
                return_type: Int,
                function_body: CodeBlock {
                    indentation: 4,
                    expressions: [
                        Return(
                            JS(
                                Literal(
                                    String(
                                        [
                                            Code(
                                                Variable(
                                                    Variable {
                                                        name: "x",
                                                    },
                                                ),
                                            ),
                                            String(
                                                ".length",
                                            ),
                                        ],
                                    ),
                                ),
                            ),
                        ),
                    ],
                },
            },
        ],
        toplevel_scope: CodeBlock {
            indentation: 0,
            expressions: [
                VariableDecl(
                    VariableDecl {
                        var_name: "a",
                        var_type: Int,
                        var_value: Literal(
                            Int(
                                23,
                            ),
                        ),
                        is_mutable: false,
                        is_env: false,
                    },
                ),
            ],
        },
        reachable_modules: [],
    },
    Module {
        module_name: "other_dep::core::string",
        type_defs: [],
        function_defs: [
            FunctionDef {
                export: true,
                func_name: "at",
                argument_list: [
                    FunctionArgument {
                        arg_name: "str",
                        arg_type: String,
                        is_env: false,
                    },
                    FunctionArgument {
                        arg_name: "idx",
                        arg_type: Int,
                        is_env: false,
                    },
                ],
                return_type: String,
                function_body: CodeBlock {
                    indentation: 8,
                    expressions: [
                        Return(
                            JS(
                                Literal(
                                    String(
                                        [
                                            Code(
                                                Variable(
                                                    Variable {
                                                        name: "str",
                                                    },
                                                ),
                                            ),
                                            String(
                                                "[",
                                            ),
                                            Code(
                                                Variable(
                                                    Variable {
                                                        name: "idx",
                                                    },
                                                ),
                                            ),
                                            String(
                                                "]",
                                            ),
                                        ],
                                    ),
                                ),
                            ),
                        ),
                    ],
                },
            },
        ],
        toplevel_scope: CodeBlock {
            indentation: 0,
            expressions: [],
        },
        reachable_modules: [],
    },
    Module {
        module_name: "other_dep::core::array",
        type_defs: [],
        function_defs: [
            FunctionDef {
                export: true,
                func_name: "push",
                argument_list: [
                    FunctionArgument {
                        arg_name: "arr",
                        arg_type: Array(
                            Any,
                        ),
                        is_env: false,
                    },
                    FunctionArgument {
                        arg_name: "el",
                        arg_type: Any,
                        is_env: false,
                    },
                ],
                return_type: Void,
                function_body: CodeBlock {
                    indentation: 8,
                    expressions: [
                        Return(
                            JS(
                                Literal(
                                    String(
                                        [
                                            Code(
                                                Variable(
                                                    Variable {
                                                        name: "arr",
                                                    },
                                                ),
                                            ),
                                            String(
                                                ".push(",
                                            ),
                                            Code(
                                                Variable(
                                                    Variable {
                                                        name: "el",
                                                    },
                                                ),
                                            ),
                                            String(
                                                ")",
                                            ),
                                        ],
                                    ),
                                ),
                            ),
                        ),
                    ],
                },
            },
            FunctionDef {
                export: true,
                func_name: "pop",
                argument_list: [
                    FunctionArgument {
                        arg_name: "arr",
                        arg_type: Array(
                            Any,
                        ),
                        is_env: false,
                    },
                ],
                return_type: Any,
                function_body: CodeBlock {
                    indentation: 8,
                    expressions: [
                        Return(
                            JS(
                                Literal(
                                    String(
                                        [
                                            Code(
                                                Variable(
                                                    Variable {
                                                        name: "arr",
                                                    },
                                                ),
                                            ),
                                            String(
                                                ".pop()",
                                            ),
                                        ],
                                    ),
                                ),
                            ),
                        ),
                    ],
                },
            },
            FunctionDef {
                export: true,
                func_name: "map",
                argument_list: [
                    FunctionArgument {
                        arg_name: "arr",
                        arg_type: Array(
                            Any,
                        ),
                        is_env: false,
                    },
                    FunctionArgument {
                        arg_name: "f",
                        arg_type: Function(
                            FunctionType {
                                env_args: [],
                                args: [
                                    Any,
                                ],
                                ret: Any,
                            },
                        ),
                        is_env: false,
                    },
                ],
                return_type: Void,
                function_body: CodeBlock {
                    indentation: 8,
                    expressions: [
                        For(
                            For {
                                binding: "i",
                                binding_type: Infer,
                                iterator: FunctionCall(
                                    FunctionCall {
                                        func_expr: Variable(
                                            Variable {
                                                name: "core::range",
                                            },
                                        ),
                                        arguments: [
                                            Literal(
                                                Int(
                                                    0,
                                                ),
                                            ),
                                            FunctionCall(
                                                FunctionCall {
                                                    func_expr: Variable(
                                                        Variable {
                                                            name: "core::len",
                                                        },
                                                    ),
                                                    arguments: [
                                                        Variable(
                                                            Variable {
                                                                name: "arr",
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                body: CodeBlock {
                                    indentation: 12,
                                    expressions: [
                                        Assignment(
                                            Assignment {
                                                lhs: ArrayAccess(
                                                    ArrayAccess {
                                                        expr: Variable(
                                                            Variable {
                                                                name: "arr",
                                                            },
                                                        ),
                                                        index: Variable(
                                                            Variable {
                                                                name: "i",
                                                            },
                                                        ),
                                                    },
                                                ),
                                                rhs: FunctionCall(
                                                    FunctionCall {
                                                        func_expr: Variable(
                                                            Variable {
                                                                name: "f",
                                                            },
                                                        ),
                                                        arguments: [
                                                            ArrayAccess(
                                                                ArrayAccess {
                                                                    expr: Variable(
                                                                        Variable {
                                                                            name: "arr",
                                                                        },
                                                                    ),
                                                                    index: Variable(
                                                                        Variable {
                                                                            name: "i",
                                                                        },
                                                                    ),
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            },
                        ),
                    ],
                },
            },
            FunctionDef {
                export: true,
                func_name: "filter",
                argument_list: [
                    FunctionArgument {
                        arg_name: "arr",
                        arg_type: Array(
                            Any,
                        ),
                        is_env: false,
                    },
                    FunctionArgument {
                        arg_name: "f",
                        arg_type: Function(
                            FunctionType {
                                env_args: [],
                                args: [
                                    Any,
                                ],
                                ret: Boolean,
                            },
                        ),
                        is_env: false,
                    },
                ],
                return_type: Array(
                    Any,
                ),
                function_body: CodeBlock {
                    indentation: 8,
                    expressions: [
                        VariableDecl(
                            VariableDecl {
                                var_name: "new_arr",
                                var_type: Array(
                                    Infer,
                                ),
                                var_value: ArrayLiteral(
                                    ArrayLiteral {
                                        elements: [],
                                    },
                                ),
                                is_mutable: true,
                                is_env: false,
                            },
                        ),
                        For(
                            For {
                                binding: "el",
                                binding_type: Infer,
                                iterator: Variable(
                                    Variable {
                                        name: "arr",
                                    },
                                ),
                                body: CodeBlock {
                                    indentation: 12,
                                    expressions: [
                                        If(
                                            If {
                                                cond: BinaryOp(
                                                    BinaryOp {
                                                        op: Equal,
                                                        lhs: FunctionCall(
                                                            FunctionCall {
                                                                func_expr: Variable(
                                                                    Variable {
                                                                        name: "f",
                                                                    },
                                                                ),
                                                                arguments: [
                                                                    Variable(
                                                                        Variable {
                                                                            name: "el",
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                        rhs: Literal(
                                                            Boolean(
                                                                true,
                                                            ),
                                                        ),
                                                    },
                                                ),
                                                true_branch: CodeBlock {
                                                    indentation: 16,
                                                    expressions: [
                                                        FunctionCall(
                                                            FunctionCall {
                                                                func_expr: Variable(
                                                                    Variable {
                                                                        name: "push",
                                                                    },
                                                                ),
                                                                arguments: [
                                                                    Variable(
                                                                        Variable {
                                                                            name: "new_arr",
                                                                        },
                                                                    ),
                                                                    Variable(
                                                                        Variable {
                                                                            name: "el",
                                                                        },
                                                                    ),
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                },
                                                else_branch: None,
                                            },
                                        ),
                                    ],
                                },
                            },
                        ),
                        Return(
                            Variable(
                                Variable {
                                    name: "new_arr",
                                },
                            ),
                        ),
                    ],
                },
            },
        ],
        toplevel_scope: CodeBlock {
            indentation: 0,
            expressions: [],
        },
        reachable_modules: [],
    },
    Module {
        module_name: "other_dep::core",
        type_defs: [],
        function_defs: [
            FunctionDef {
                export: true,
                func_name: "deep_copy",
                argument_list: [
                    FunctionArgument {
                        arg_name: "x",
                        arg_type: Any,
                        is_env: false,
                    },
                ],
                return_type: Any,
                function_body: CodeBlock {
                    indentation: 0,
                    expressions: [
                        JS(
                            Literal(
                                String(
                                    [
                                        String(
                                            "return structuredClone(",
                                        ),
                                        Code(
                                            Variable(
                                                Variable {
                                                    name: "x",
                                                },
                                            ),
                                        ),
                                        String(
                                            ");",
                                        ),
                                    ],
                                ),
                            ),
                        ),
                    ],
                },
            },
            FunctionDef {
                export: true,
                func_name: "print",
                argument_list: [
                    FunctionArgument {
                        arg_name: "x",
                        arg_type: Any,
                        is_env: false,
                    },
                ],
                return_type: Void,
                function_body: CodeBlock {
                    indentation: 0,
                    expressions: [
                        JS(
                            Literal(
                                String(
                                    [
                                        String(
                                            "console.log(",
                                        ),
                                        Code(
                                            Variable(
                                                Variable {
                                                    name: "x",
                                                },
                                            ),
                                        ),
                                        String(
                                            ")",
                                        ),
                                    ],
                                ),
                            ),
                        ),
                    ],
                },
            },
            FunctionDef {
                export: true,
                func_name: "range",
                argument_list: [
                    FunctionArgument {
                        arg_name: "start",
                        arg_type: Int,
                        is_env: false,
                    },
                    FunctionArgument {
                        arg_name: "end",
                        arg_type: Int,
                        is_env: false,
                    },
                ],
                return_type: Array(
                    Any,
                ),
                function_body: CodeBlock {
                    indentation: 4,
                    expressions: [
                        Return(
                            JS(
                                Literal(
                                    String(
                                        [
                                            String(
                                                "\n        (function*() \\{\n            for(let i = ",
                                            ),
                                            Code(
                                                Variable(
                                                    Variable {
                                                        name: "start",
                                                    },
                                                ),
                                            ),
                                            String(
                                                "; i < ",
                                            ),
                                            Code(
                                                Variable(
                                                    Variable {
                                                        name: "end",
                                                    },
                                                ),
                                            ),
                                            String(
                                                "; i++) \\{\n                yield i;\n            \\}\n        \\})()\n    ",
                                            ),
                                        ],
                                    ),
                                ),
                            ),
                        ),
                    ],
                },
            },
            FunctionDef {
                export: true,
                func_name: "len",
                argument_list: [
                    FunctionArgument {
                        arg_name: "x",
                        arg_type: Any,
                        is_env: false,
                    },
                ],
                return_type: Int,
                function_body: CodeBlock {
                    indentation: 4,
                    expressions: [
                        Return(
                            JS(
                                Literal(
                                    String(
                                        [
                                            Code(
                                                Variable(
                                                    Variable {
                                                        name: "x",
                                                    },
                                                ),
                                            ),
                                            String(
                                                ".length",
                                            ),
                                        ],
                                    ),
                                ),
                            ),
                        ),
                    ],
                },
            },
        ],
        toplevel_scope: CodeBlock {
            indentation: 0,
            expressions: [
                VariableDecl(
                    VariableDecl {
                        var_name: "a",
                        var_type: Int,
                        var_value: Literal(
                            Int(
                                23,
                            ),
                        ),
                        is_mutable: false,
                        is_env: false,
                    },
                ),
            ],
        },
        reachable_modules: [],
    },
    Module {
        module_name: "other_dep",
        type_defs: [],
        function_defs: [
            FunctionDef {
                export: false,
                func_name: "other_foo",
                argument_list: [],
                return_type: Void,
                function_body: CodeBlock {
                    indentation: 0,
                    expressions: [
                        FunctionCall(
                            FunctionCall {
                                func_expr: Variable(
                                    Variable {
                                        name: "core::print",
                                    },
                                ),
                                arguments: [
                                    Literal(
                                        String(
                                            [
                                                String(
                                                    "Hello",
                                                ),
                                            ],
                                        ),
                                    ),
                                ],
                            },
                        ),
                    ],
                },
            },
        ],
        toplevel_scope: CodeBlock {
            indentation: 0,
            expressions: [],
        },
        reachable_modules: [],
    },
    Module {
        module_name: "test::core",
        type_defs: [],
        function_defs: [
            FunctionDef {
                export: false,
                func_name: "foo",
                argument_list: [
                    FunctionArgument {
                        arg_name: "x",
                        arg_type: Int,
                        is_env: false,
                    },
                ],
                return_type: Int,
                function_body: CodeBlock {
                    indentation: 0,
                    expressions: [
                        Return(
                            BinaryOp(
                                BinaryOp {
                                    op: Multiply,
                                    lhs: Variable(
                                        Variable {
                                            name: "x",
                                        },
                                    ),
                                    rhs: Literal(
                                        Int(
                                            2,
                                        ),
                                    ),
                                },
                            ),
                        ),
                    ],
                },
            },
        ],
        toplevel_scope: CodeBlock {
            indentation: 0,
            expressions: [],
        },
        reachable_modules: [],
    },
    Module {
        module_name: "test::foo::core",
        type_defs: [],
        function_defs: [],
        toplevel_scope: CodeBlock {
            indentation: 0,
            expressions: [
                VariableDecl(
                    VariableDecl {
                        var_name: "val",
                        var_type: Int,
                        var_value: Literal(
                            Int(
                                23,
                            ),
                        ),
                        is_mutable: false,
                        is_env: false,
                    },
                ),
            ],
        },
        reachable_modules: [],
    },
    Module {
        module_name: "test::foo",
        type_defs: [],
        function_defs: [],
        toplevel_scope: CodeBlock {
            indentation: 0,
            expressions: [
                VariableDecl(
                    VariableDecl {
                        var_name: "val",
                        var_type: Int,
                        var_value: Literal(
                            Int(
                                53,
                            ),
                        ),
                        is_mutable: false,
                        is_env: false,
                    },
                ),
            ],
        },
        reachable_modules: [],
    },
    Module {
        module_name: "test",
        type_defs: [
            TypeDef {
                name: "Person",
                export: false,
                underlying_ty: Struct(
                    StructDef {
                        fields: [
                            StructField {
                                field_name: "name",
                                field_type: String,
                                is_final: false,
                            },
                        ],
                    },
                ),
            },
        ],
        function_defs: [
            FunctionDef {
                export: false,
                func_name: "main",
                argument_list: [],
                return_type: Void,
                function_body: CodeBlock {
                    indentation: 4,
                    expressions: [
                        VariableDecl(
                            VariableDecl {
                                var_name: "siema",
                                var_type: Int,
                                var_value: Literal(
                                    Int(
                                        530,
                                    ),
                                ),
                                is_mutable: false,
                                is_env: false,
                            },
                        ),
                        VariableDecl(
                            VariableDecl {
                                var_name: "fstring",
                                var_type: String,
                                var_value: Literal(
                                    String(
                                        [
                                            Code(
                                                Variable(
                                                    Variable {
                                                        name: "siema",
                                                    },
                                                ),
                                            ),
                                        ],
                                    ),
                                ),
                                is_mutable: false,
                                is_env: false,
                            },
                        ),
                        FunctionCall(
                            FunctionCall {
                                func_expr: Variable(
                                    Variable {
                                        name: "core::print",
                                    },
                                ),
                                arguments: [
                                    Variable(
                                        Variable {
                                            name: "fstring",
                                        },
                                    ),
                                ],
                            },
                        ),
                        VariableDecl(
                            VariableDecl {
                                var_name: "num",
                                var_type: Int,
                                var_value: FunctionCall(
                                    FunctionCall {
                                        func_expr: Variable(
                                            Variable {
                                                name: "test::core::foo",
                                            },
                                        ),
                                        arguments: [
                                            Literal(
                                                Int(
                                                    23,
                                                ),
                                            ),
                                        ],
                                    },
                                ),
                                is_mutable: false,
                                is_env: false,
                            },
                        ),
                        FunctionCall(
                            FunctionCall {
                                func_expr: Variable(
                                    Variable {
                                        name: "core::print",
                                    },
                                ),
                                arguments: [
                                    Variable(
                                        Variable {
                                            name: "num",
                                        },
                                    ),
                                ],
                            },
                        ),
                        FunctionCall(
                            FunctionCall {
                                func_expr: Variable(
                                    Variable {
                                        name: "other_dep::core::print",
                                    },
                                ),
                                arguments: [
                                    Literal(
                                        Int(
                                            2,
                                        ),
                                    ),
                                ],
                            },
                        ),
                        FunctionCall(
                            FunctionCall {
                                func_expr: Variable(
                                    Variable {
                                        name: "other_dep::other_foo",
                                    },
                                ),
                                arguments: [],
                            },
                        ),
                    ],
                },
            },
            FunctionDef {
                export: false,
                func_name: "make_babies",
                argument_list: [
                    FunctionArgument {
                        arg_name: "p1",
                        arg_type: Custom(
                            CustomType {
                                name: "Person",
                            },
                        ),
                        is_env: false,
                    },
                    FunctionArgument {
                        arg_name: "p2",
                        arg_type: Custom(
                            CustomType {
                                name: "Person",
                            },
                        ),
                        is_env: false,
                    },
                ],
                return_type: Custom(
                    CustomType {
                        name: "Person",
                    },
                ),
                function_body: CodeBlock {
                    indentation: 4,
                    expressions: [
                        VariableDecl(
                            VariableDecl {
                                var_name: "p1_half",
                                var_type: String,
                                var_value: FunctionCall(
                                    FunctionCall {
                                        func_expr: Variable(
                                            Variable {
                                                name: "substr",
                                            },
                                        ),
                                        arguments: [
                                            FieldAccess(
                                                FieldAccess {
                                                    expr: Variable(
                                                        Variable {
                                                            name: "p1",
                                                        },
                                                    ),
                                                    field: "name",
                                                },
                                            ),
                                            Literal(
                                                Int(
                                                    0,
                                                ),
                                            ),
                                            BinaryOp(
                                                BinaryOp {
                                                    op: Divide,
                                                    lhs: FunctionCall(
                                                        FunctionCall {
                                                            func_expr: Variable(
                                                                Variable {
                                                                    name: "core::len",
                                                                },
                                                            ),
                                                            arguments: [
                                                                FieldAccess(
                                                                    FieldAccess {
                                                                        expr: Variable(
                                                                            Variable {
                                                                                name: "p1",
                                                                            },
                                                                        ),
                                                                        field: "name",
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    rhs: Literal(
                                                        Int(
                                                            2,
                                                        ),
                                                    ),
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                is_mutable: false,
                                is_env: false,
                            },
                        ),
                        VariableDecl(
                            VariableDecl {
                                var_name: "p2_half",
                                var_type: String,
                                var_value: FunctionCall(
                                    FunctionCall {
                                        func_expr: Variable(
                                            Variable {
                                                name: "substr",
                                            },
                                        ),
                                        arguments: [
                                            FieldAccess(
                                                FieldAccess {
                                                    expr: Variable(
                                                        Variable {
                                                            name: "p2",
                                                        },
                                                    ),
                                                    field: "name",
                                                },
                                            ),
                                            BinaryOp(
                                                BinaryOp {
                                                    op: Divide,
                                                    lhs: FunctionCall(
                                                        FunctionCall {
                                                            func_expr: Variable(
                                                                Variable {
                                                                    name: "core::len",
                                                                },
                                                            ),
                                                            arguments: [
                                                                FieldAccess(
                                                                    FieldAccess {
                                                                        expr: Variable(
                                                                            Variable {
                                                                                name: "p2",
                                                                            },
                                                                        ),
                                                                        field: "name",
                                                                    },
                                                                ),
                                                            ],
                                                        },
                                                    ),
                                                    rhs: Literal(
                                                        Int(
                                                            2,
                                                        ),
                                                    ),
                                                },
                                            ),
                                            FunctionCall(
                                                FunctionCall {
                                                    func_expr: Variable(
                                                        Variable {
                                                            name: "core::len",
                                                        },
                                                    ),
                                                    arguments: [
                                                        FieldAccess(
                                                            FieldAccess {
                                                                expr: Variable(
                                                                    Variable {
                                                                        name: "p2",
                                                                    },
                                                                ),
                                                                field: "name",
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                is_mutable: false,
                                is_env: false,
                            },
                        ),
                        Return(
                            NamedStruct(
                                NamedStruct {
                                    casted_to: "Person",
                                    struct_literal: AnonStruct {
                                        fields: {
                                            "name": Literal(
                                                String(
                                                    [
                                                        Code(
                                                            Variable(
                                                                Variable {
                                                                    name: "p1_half",
                                                                },
                                                            ),
                                                        ),
                                                        Code(
                                                            Variable(
                                                                Variable {
                                                                    name: "p2_half",
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                ),
                                            ),
                                        },
                                    },
                                },
                            ),
                        ),
                    ],
                },
            },
            FunctionDef {
                export: false,
                func_name: "chars",
                argument_list: [
                    FunctionArgument {
                        arg_name: "str",
                        arg_type: String,
                        is_env: false,
                    },
                ],
                return_type: Array(
                    Any,
                ),
                function_body: CodeBlock {
                    indentation: 4,
                    expressions: [
                        VariableDecl(
                            VariableDecl {
                                var_name: "arr",
                                var_type: Array(
                                    Infer,
                                ),
                                var_value: ArrayLiteral(
                                    ArrayLiteral {
                                        elements: [],
                                    },
                                ),
                                is_mutable: true,
                                is_env: false,
                            },
                        ),
                        For(
                            For {
                                binding: "i",
                                binding_type: Infer,
                                iterator: FunctionCall(
                                    FunctionCall {
                                        func_expr: Variable(
                                            Variable {
                                                name: "core::range",
                                            },
                                        ),
                                        arguments: [
                                            Literal(
                                                Int(
                                                    0,
                                                ),
                                            ),
                                            FunctionCall(
                                                FunctionCall {
                                                    func_expr: Variable(
                                                        Variable {
                                                            name: "core::len",
                                                        },
                                                    ),
                                                    arguments: [
                                                        Variable(
                                                            Variable {
                                                                name: "str",
                                                            },
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                body: CodeBlock {
                                    indentation: 8,
                                    expressions: [
                                        VariableDecl(
                                            VariableDecl {
                                                var_name: "char",
                                                var_type: String,
                                                var_value: FunctionCall(
                                                    FunctionCall {
                                                        func_expr: Variable(
                                                            Variable {
                                                                name: "core::string::at",
                                                            },
                                                        ),
                                                        arguments: [
                                                            Variable(
                                                                Variable {
                                                                    name: "str",
                                                                },
                                                            ),
                                                            Variable(
                                                                Variable {
                                                                    name: "i",
                                                                },
                                                            ),
                                                        ],
                                                    },
                                                ),
                                                is_mutable: false,
                                                is_env: false,
                                            },
                                        ),
                                        FunctionCall(
                                            FunctionCall {
                                                func_expr: Variable(
                                                    Variable {
                                                        name: "core::array::push",
                                                    },
                                                ),
                                                arguments: [
                                                    Variable(
                                                        Variable {
                                                            name: "arr",
                                                        },
                                                    ),
                                                    Variable(
                                                        Variable {
                                                            name: "char",
                                                        },
                                                    ),
                                                ],
                                            },
                                        ),
                                    ],
                                },
                            },
                        ),
                        Return(
                            Variable(
                                Variable {
                                    name: "arr",
                                },
                            ),
                        ),
                    ],
                },
            },
            FunctionDef {
                export: false,
                func_name: "substr",
                argument_list: [
                    FunctionArgument {
                        arg_name: "str",
                        arg_type: String,
                        is_env: false,
                    },
                    FunctionArgument {
                        arg_name: "_from",
                        arg_type: Int,
                        is_env: false,
                    },
                    FunctionArgument {
                        arg_name: "to",
                        arg_type: Int,
                        is_env: false,
                    },
                ],
                return_type: String,
                function_body: CodeBlock {
                    indentation: 4,
                    expressions: [
                        VariableDecl(
                            VariableDecl {
                                var_name: "str_chars",
                                var_type: Array(
                                    Any,
                                ),
                                var_value: FunctionCall(
                                    FunctionCall {
                                        func_expr: Variable(
                                            Variable {
                                                name: "chars",
                                            },
                                        ),
                                        arguments: [
                                            Variable(
                                                Variable {
                                                    name: "str",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                is_mutable: false,
                                is_env: false,
                            },
                        ),
                        VariableDecl(
                            VariableDecl {
                                var_name: "substr",
                                var_type: String,
                                var_value: Literal(
                                    String(
                                        [],
                                    ),
                                ),
                                is_mutable: true,
                                is_env: false,
                            },
                        ),
                        For(
                            For {
                                binding: "i",
                                binding_type: Infer,
                                iterator: FunctionCall(
                                    FunctionCall {
                                        func_expr: Variable(
                                            Variable {
                                                name: "core::range",
                                            },
                                        ),
                                        arguments: [
                                            Variable(
                                                Variable {
                                                    name: "_from",
                                                },
                                            ),
                                            Variable(
                                                Variable {
                                                    name: "to",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                body: CodeBlock {
                                    indentation: 8,
                                    expressions: [
                                        Assignment(
                                            Assignment {
                                                lhs: Variable(
                                                    Variable {
                                                        name: "substr",
                                                    },
                                                ),
                                                rhs: BinaryOp(
                                                    BinaryOp {
                                                        op: Add,
                                                        lhs: Variable(
                                                            Variable {
                                                                name: "substr",
                                                            },
                                                        ),
                                                        rhs: ArrayAccess(
                                                            ArrayAccess {
                                                                expr: Variable(
                                                                    Variable {
                                                                        name: "str_chars",
                                                                    },
                                                                ),
                                                                index: Variable(
                                                                    Variable {
                                                                        name: "i",
                                                                    },
                                                                ),
                                                            },
                                                        ),
                                                    },
                                                ),
                                            },
                                        ),
                                    ],
                                },
                            },
                        ),
                        Return(
                            Variable(
                                Variable {
                                    name: "substr",
                                },
                            ),
                        ),
                    ],
                },
            },
            FunctionDef {
                export: false,
                func_name: "babies",
                argument_list: [],
                return_type: Void,
                function_body: CodeBlock {
                    indentation: 4,
                    expressions: [
                        VariableDecl(
                            VariableDecl {
                                var_name: "daddy",
                                var_type: Custom(
                                    CustomType {
                                        name: "Person",
                                    },
                                ),
                                var_value: NamedStruct(
                                    NamedStruct {
                                        casted_to: "Person",
                                        struct_literal: AnonStruct {
                                            fields: {
                                                "name": Literal(
                                                    String(
                                                        [
                                                            String(
                                                                "Blazej",
                                                            ),
                                                        ],
                                                    ),
                                                ),
                                            },
                                        },
                                    },
                                ),
                                is_mutable: false,
                                is_env: false,
                            },
                        ),
                        VariableDecl(
                            VariableDecl {
                                var_name: "mommy",
                                var_type: Custom(
                                    CustomType {
                                        name: "Person",
                                    },
                                ),
                                var_value: NamedStruct(
                                    NamedStruct {
                                        casted_to: "Person",
                                        struct_literal: AnonStruct {
                                            fields: {
                                                "name": Literal(
                                                    String(
                                                        [
                                                            String(
                                                                "Kundegunda",
                                                            ),
                                                        ],
                                                    ),
                                                ),
                                            },
                                        },
                                    },
                                ),
                                is_mutable: false,
                                is_env: false,
                            },
                        ),
                        VariableDecl(
                            VariableDecl {
                                var_name: "baby",
                                var_type: Custom(
                                    CustomType {
                                        name: "Person",
                                    },
                                ),
                                var_value: FunctionCall(
                                    FunctionCall {
                                        func_expr: Variable(
                                            Variable {
                                                name: "make_babies",
                                            },
                                        ),
                                        arguments: [
                                            Variable(
                                                Variable {
                                                    name: "daddy",
                                                },
                                            ),
                                            Variable(
                                                Variable {
                                                    name: "mommy",
                                                },
                                            ),
                                        ],
                                    },
                                ),
                                is_mutable: false,
                                is_env: false,
                            },
                        ),
                        FunctionCall(
                            FunctionCall {
                                func_expr: Variable(
                                    Variable {
                                        name: "core::print",
                                    },
                                ),
                                arguments: [
                                    Literal(
                                        String(
                                            [
                                                String(
                                                    "imie bachora: ",
                                                ),
                                                Code(
                                                    FieldAccess(
                                                        FieldAccess {
                                                            expr: Variable(
                                                                Variable {
                                                                    name: "baby",
                                                                },
                                                            ),
                                                            field: "name",
                                                        },
                                                    ),
                                                ),
                                            ],
                                        ),
                                    ),
                                ],
                            },
                        ),
                    ],
                },
            },
        ],
        toplevel_scope: CodeBlock {
            indentation: 0,
            expressions: [
                Import(
                    Import {
                        name: "test::core",
                        children: [],
                        alias: None,
                    },
                ),
            ],
        },
        reachable_modules: [],
    },
]