type Person =
    age  int
    name string

fn square(arr [int]) -> [int] =
    let res = arr.util::map(fn(x) return x * x)

    return res

export fn plus1(arr [int]) -> int =
    let [int] res = arr
        .util::map(fn(x) return x + 1)

    return res

fn map_and_add(arr [int], f fn(int -> int), add int) -> int =
    let mapped = util::map(arr, f)
    let mapped = util::map(mapped, fn(x) return x + add)
    let mapped = mapped
    return mapped

fn main =
    core::print("Square and add 2: [1, 2, 3]")
    map_and_add(
        [1, 2, 3],
        fn(x)
            let square = x * x
            return square,
        2
    )
    .core::print()

    core::print("Create array filled with squares of numbers 1-10")
    let push = fn(arr, x) @js(arr ".push(" x ")")

    mut arr2 = []
    for i in 1..=10: arr2.push(i)

    arr2.util::map(fn(x) return x * x, 2)
        .core::print()

    // let util::Printable something_that_can_be_printed = ...

    let [int] arr1 = square([1, 2, 3, 4, 5])
    core::print(arr1)

    let arr2 = plus1([1, 2, 3, 4, 5])
    arr2.core::print()

    arr2.util::map(fn(x) return x * x, 2)
        .core::print()


    mut a = 1

    a = 2

    // this works
    // let lambda = fn(x, y) return x + y
    // let lambda2 = fn(x int, y) return x + y
    // let lambda3 = fn(x int, y int) return x + y
    // let lambda4 = fn(x int, y int) -> int return x + y
    // let lambda5 = fn(x int, y int) -> int
    //     let sum = x + y
    //     return sum

    // let arr = [lambda, lambda2, lambda3, lambda4, lambda5]

    // for l in arr:
    //     l(2, 3).core::print()

    core::print("Print people data")
    mut people = [
        Person { age: 10, name: "Marque" },
        Person { age: 14, name: "Marc" },
        Person { age: 93, name: "Mark" },
    ]

    // Struct field shorthand
    let age = 23
    let name = "Maciej"
    people.push(Person { age, name })

    let fn(Person -> string) person_lambda = fn(person)
        return util::to_string(person.age) + " - " + person.name

    for Person p in people:
        let str = person_lambda(p)
        core::print(str)

let fn([int] -> ()) lambda =
    fn(x) for y in x: core::print(y * 2)

//    core::print("Lambdas as fields")

//    thingy()

// let implicit_arg = fn(ctx Context)(_) Context::multiply(ctx, $1 * $2)
// let fn(Context)(int, int) implicit_arg =
// fn(ctx)(_) Context::multiply(ctx, $1 * $2)


type StructWithLambda =
    l fn(int -> int)

fn thingy =
    let StructWithLambda s = StructWithLambda {
        l: fn(x) return x + 10
    }

    core::print(
        (s.l)(20)
    )

    let higher_order = fn(x)
        return fn(y)
            return x * y

    core::print(
        higher_order(5)(5) // 25
    )
