
Frogscript:
    ✔ Type parsing @done(23-12-19 20:57)
    ✔ Indexing operator (var[index]) @high @done(23-12-19 11:04)
    ✔ Array literals @high @done(23-12-19 11:04)
    ✔ Parse/lex negative ints and floats @critical @done(23-12-19 11:38)
    ✔ Rework chaining . and [ on most methods since they all end with the same match @done(23-12-19 11:04)
    related (i think?) cleanup match allowing for . and [ in array literal
    
    ✘ Some kind of an `any` type for js interop @cancelled(23-12-19 21:19)
    hopefully something that cant be abused to avoid the type system
    (23-12-19 21:18) maybe generics are the solution

    ☐ Better error messages, show error location (line:col) 
    ✔ Fix `()(type -> ret)` err msg because its unclear rn @done(23-12-21 21:11)
    ^ (correct syntax is `(())(type -> ret)` or `(type -> ret)`)
    
    ☐ String templates ("var: ${var}") @high
    ☐ Escape sequences in strings ("\"siema\"") @high
    
    
    ✔ Splitting expression to multiple lines with \n @critical @done(23-12-21 21:11)
    ✔ Parsing anon structs @done(23-12-21 21:29)
    ✔ Parse +=, -=, *=, /= @done(23-12-21 21:40)
    ✔ Parse field accessing (foo.field) @done(23-12-21 21:48)
    ✔ Field access assignment (foo.field = ...) @done(23-12-21 22:59)
    ✔ Parse imports @done(23-12-22 15:02)
    ☐ Parsing custom types
    ☐ Parsing enums
    ☐ Come up with a syntax for lambdas and parse it
    ☐ Parse casts on anon structs (aka `Person { name: "John" }` is a cast from anon struct to Person)
    
    ☐ Associate variables/functions with ids so its possible to change their names when transpiling

    ☐ Transpile implicit returns
    ☐ Transpile ranges into generator functions @critical